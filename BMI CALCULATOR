import sys
import sqlite3
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QLineEdit, QPushButton, QMessageBox
import matplotlib.pyplot as plt

class BMI_Calculator(QWidget):
    def __init__(self):
        super().__init__()
        self.initialize_ui()
        self.initialize_database()

    def initialize_ui(self):
        # Set up the main window
        self.setWindowTitle('BMI Calculator')
        self.setGeometry(100, 100, 300, 200)

        # Create labels and input fields for weight and height
        self.weight_label = QLabel('Weight (kg):')
        self.weight_edit = QLineEdit()
        self.height_label = QLabel('Height (m):')
        self.height_edit = QLineEdit()

        # Create labels for displaying BMI result and a button to calculate BMI
        self.result_label = QLabel('BMI:')
        self.calculate_button = QPushButton('Calculate BMI')
        self.calculate_button.clicked.connect(self.calculate_bmi)

        # Create a button to save BMI data
        self.save_button = QPushButton('Save Data')
        self.save_button.clicked.connect(self.save_data)

        # Set up the layout of the main window
        layout = QVBoxLayout()
        layout.addWidget(self.weight_label)
        layout.addWidget(self.weight_edit)
        layout.addWidget(self.height_label)
        layout.addWidget(self.height_edit)
        layout.addWidget(self.calculate_button)
        layout.addWidget(self.result_label)
        layout.addWidget(self.save_button)
        self.setLayout(layout)

    def initialize_database(self):
        # Connect to the SQLite database
        self.conn = sqlite3.connect('bmi_data.db')
        self.cur = self.conn.cursor()

        # Create a table to store BMI data if it does not exist
        self.cur.execute('''CREATE TABLE IF NOT EXISTS bmi_data
                            (id INTEGER PRIMARY KEY, weight REAL, height REAL, bmi REAL)''')
        self.conn.commit()

    def calculate_bmi(self):
        try:
            # Calculate BMI using the provided weight and height
            weight = float(self.weight_edit.text())
            height = float(self.height_edit.text())
            bmi = weight / (height ** 2)
            self.result_label.setText(f'BMI: {bmi:.2f}')
        except ValueError:
            # Display a warning if the user enters invalid weight or height
            QMessageBox.warning(self, 'Error', 'Please enter valid weight and height.')

    def save_data(self):
        try:
            # Calculate BMI and save the data to the database
            weight = float(self.weight_edit.text())
            height = float(self.height_edit.text())
            bmi = weight / (height ** 2)
            self.cur.execute('INSERT INTO bmi_data (weight, height, bmi) VALUES (?, ?, ?)', (weight, height, bmi))
            self.conn.commit()

            # Show a graph of BMI trend after saving data
            self.show_graph()
        except ValueError:
            # Display a warning if the user tries to save data without calculating BMI first
            QMessageBox.warning(self, 'Error', 'Please calculate BMI before saving data.')

    def show_graph(self):
        # Retrieve BMI data from the database and plot a graph
        self.cur.execute('SELECT height, bmi FROM bmi_data')
        data = self.cur.fetchall()
        heights, bmis = zip(*data)
        plt.figure()
        plt.scatter(heights, bmis)
        plt.xlabel('Height (m)')
        plt.ylabel('BMI')
        plt.title('BMI Trend')
        plt.show()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    calculator = BMI_Calculator()
    calculator.show()
    sys.exit(app.exec_())
